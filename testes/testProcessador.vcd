$date
	Sun Jun 16 21:44:58 2024
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module testbench $end
$var wire 16 ! bus [15:0] $end
$var reg 1 " clock $end
$var reg 16 # iin [15:0] $end
$var reg 1 $ resetn $end
$scope module p $end
$var wire 1 " clk $end
$var wire 16 % iin [15:0] $end
$var wire 1 $ resetn $end
$var wire 8 & reg_select [7:0] $end
$var wire 1 ' r_select $end
$var wire 1 ( r_enable $end
$var wire 1 ) r7_enable $end
$var wire 16 * r7 [15:0] $end
$var wire 1 + r6_enable $end
$var wire 16 , r6 [15:0] $end
$var wire 1 - r5_enable $end
$var wire 16 . r5 [15:0] $end
$var wire 1 / r4_enable $end
$var wire 16 0 r4 [15:0] $end
$var wire 1 1 r3_enable $end
$var wire 16 2 r3 [15:0] $end
$var wire 1 3 r2_enable $end
$var wire 16 4 r2 [15:0] $end
$var wire 1 5 r1_enable $end
$var wire 16 6 r1 [15:0] $end
$var wire 1 7 r0_enable $end
$var wire 16 8 r0 [15:0] $end
$var wire 16 9 r [15:0] $end
$var wire 16 : out [15:0] $end
$var wire 1 ; opSelect $end
$var wire 1 < negativo $end
$var wire 1 = immediate_select $end
$var wire 16 > imediat [15:0] $end
$var wire 2 ? cont [1:0] $end
$var wire 1 @ clear $end
$var wire 16 A bus1 [15:0] $end
$var wire 16 B bus [15:0] $end
$var wire 1 C a_enable $end
$var wire 16 D a [15:0] $end
$var reg 9 E iin9 [8:0] $end
$var reg 16 F outProcessador [15:0] $end
$scope module Ra $end
$var wire 1 " clk $end
$var wire 16 G in [15:0] $end
$var wire 1 C enable $end
$var reg 16 H out [15:0] $end
$upscope $end
$scope module Rr $end
$var wire 1 " clk $end
$var wire 16 I in [15:0] $end
$var wire 1 ( enable $end
$var reg 16 J out [15:0] $end
$upscope $end
$scope module Rr0 $end
$var wire 1 " clk $end
$var wire 16 K in [15:0] $end
$var wire 1 7 enable $end
$var reg 16 L out [15:0] $end
$upscope $end
$scope module Rr1 $end
$var wire 1 " clk $end
$var wire 16 M in [15:0] $end
$var wire 1 5 enable $end
$var reg 16 N out [15:0] $end
$upscope $end
$scope module Rr2 $end
$var wire 1 " clk $end
$var wire 16 O in [15:0] $end
$var wire 1 3 enable $end
$var reg 16 P out [15:0] $end
$upscope $end
$scope module Rr3 $end
$var wire 1 " clk $end
$var wire 16 Q in [15:0] $end
$var wire 1 1 enable $end
$var reg 16 R out [15:0] $end
$upscope $end
$scope module Rr4 $end
$var wire 1 " clk $end
$var wire 16 S in [15:0] $end
$var wire 1 / enable $end
$var reg 16 T out [15:0] $end
$upscope $end
$scope module Rr5 $end
$var wire 1 " clk $end
$var wire 16 U in [15:0] $end
$var wire 1 - enable $end
$var reg 16 V out [15:0] $end
$upscope $end
$scope module Rr6 $end
$var wire 1 " clk $end
$var wire 16 W in [15:0] $end
$var wire 1 + enable $end
$var reg 16 X out [15:0] $end
$upscope $end
$scope module Rr7 $end
$var wire 1 " clk $end
$var wire 16 Y in [15:0] $end
$var wire 1 ) enable $end
$var reg 16 Z out [15:0] $end
$upscope $end
$scope module c2 $end
$var wire 16 [ in [15:0] $end
$var wire 1 < controle $end
$var reg 16 \ out [15:0] $end
$upscope $end
$scope module contad $end
$var wire 1 " clock $end
$var wire 1 @ clear $end
$var reg 2 ] out [1:0] $end
$upscope $end
$scope module ext $end
$var wire 16 ^ inn [15:0] $end
$var reg 16 _ out [15:0] $end
$upscope $end
$scope module m $end
$var wire 16 ` imediat [15:0] $end
$var wire 16 a r [15:0] $end
$var wire 16 b r0 [15:0] $end
$var wire 16 c r1 [15:0] $end
$var wire 16 d r2 [15:0] $end
$var wire 16 e r3 [15:0] $end
$var wire 16 f r4 [15:0] $end
$var wire 16 g r5 [15:0] $end
$var wire 16 h r6 [15:0] $end
$var wire 16 i r7 [15:0] $end
$var wire 8 j reg_select [7:0] $end
$var wire 1 ' r_select $end
$var wire 1 = imediat_select $end
$var reg 16 k bus [15:0] $end
$upscope $end
$scope module u $end
$var wire 16 l in_a [15:0] $end
$var wire 16 m in_b [15:0] $end
$var wire 1 ; op_select $end
$var reg 16 n out [15:0] $end
$upscope $end
$scope module uc $end
$var wire 2 o cont [1:0] $end
$var wire 9 p in [8:0] $end
$var wire 1 $ resetn $end
$var wire 8 q outRegister2 [7:0] $end
$var wire 8 r outRegister1 [7:0] $end
$var wire 8 s outEnableRegister [7:0] $end
$var reg 1 C a_enable $end
$var reg 1 @ clear $end
$var reg 1 = immediate_select $end
$var reg 1 t negar $end
$var reg 1 < negativo $end
$var reg 1 ; opSelect $end
$var reg 3 u opcode [2:0] $end
$var reg 1 7 r0_enable $end
$var reg 1 5 r1_enable $end
$var reg 1 3 r2_enable $end
$var reg 1 1 r3_enable $end
$var reg 1 / r4_enable $end
$var reg 1 - r5_enable $end
$var reg 1 + r6_enable $end
$var reg 1 ) r7_enable $end
$var reg 1 ( r_enable $end
$var reg 1 ' r_select $end
$var reg 8 v reg_select [7:0] $end
$var reg 3 w register1 [2:0] $end
$var reg 3 x register2 [2:0] $end
$var reg 1 y saida $end
$var reg 2 z status [1:0] $end
$scope module d1 $end
$var wire 3 { in [2:0] $end
$var reg 8 | out [7:0] $end
$upscope $end
$scope module d2 $end
$var wire 3 } in [2:0] $end
$var reg 8 ~ out [7:0] $end
$upscope $end
$scope module d3 $end
$var wire 3 !" in [2:0] $end
$var reg 8 "" out [7:0] $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
bx ""
bx !"
bx ~
bx }
bx |
bx {
bx z
xy
bx x
bx w
bx v
bx u
xt
bx s
bx r
bx q
bx p
b0 o
bx n
b0 m
bx l
b0 k
bx j
bx i
bx h
bx g
bx f
bx e
bx d
bx c
bx b
bx a
bx `
bx _
bx ^
b0 ]
b0 \
b0 [
bx Z
b0 Y
bx X
b0 W
bx V
b0 U
bx T
b0 S
bx R
b0 Q
bx P
b0 O
bx N
b0 M
bx L
b0 K
bx J
bx I
bx H
b0 G
b0 F
bx E
bx D
xC
b0 B
b0 A
1@
b0 ?
bx >
x=
x<
x;
bx :
bx 9
bx 8
07
bx 6
05
bx 4
03
bx 2
01
bx 0
0/
bx .
0-
bx ,
0+
bx *
0)
x(
0'
bx &
bx %
0$
bx #
0"
b0 !
$end
#1
1"
#2
0"
#3
1"
#4
0"
#5
1"
#6
0"
#7
1"
#8
0y
0t
b11 z
1;
0@
b10000000 q
b10000000 ~
b10000000 s
b10000000 ""
b10000000 r
b10000000 |
b0 x
b0 }
b0 w
b0 {
b0 !"
b101 u
b101000000 E
b101000000 p
b1 >
b1 _
b1 `
0"
b1010000000000001 #
b1010000000000001 %
b1010000000000001 ^
#9
b0 &
b0 j
b0 v
0=
1C
b1 ?
b1 ]
b1 o
1"
#10
0"
#11
b1 !
b1 F
b1 B
b1 G
b1 K
b1 M
b1 O
b1 Q
b1 S
b1 U
b1 W
b1 Y
b1 \
b1 m
b1 A
b1 [
b1 k
b1 :
b1 I
b1 n
1=
1(
0C
b0 D
b0 H
b0 l
b10 ?
b10 ]
b10 o
1"
#12
0"
#13
1'
0=
0(
0<
b1 9
b1 J
b1 a
17
bx z
b11 ?
b11 ]
b11 o
1"
#14
0"
#15
b0 !
b0 F
b0 :
b0 I
b0 n
b0 B
b0 G
b0 K
b0 M
b0 O
b0 Q
b0 S
b0 U
b0 W
b0 Y
b0 \
b0 m
b0 A
b0 [
b0 k
b11 z
07
0'
b1 8
b1 L
b1 b
b0 ?
b0 ]
b0 o
1"
#16
b1000000 r
b1000000 |
b1000000 s
b1000000 ""
b1 w
b1 {
b1 !"
b10 >
b10 _
b10 `
b101001000 E
b101001000 p
0"
b1010010000000010 #
b1010010000000010 %
b1010010000000010 ^
#17
1C
b1 ?
b1 ]
b1 o
1"
#18
0"
#19
b10 !
b10 F
b10 :
b10 I
b10 n
b10 B
b10 G
b10 K
b10 M
b10 O
b10 Q
b10 S
b10 U
b10 W
b10 Y
b10 \
b10 m
b10 A
b10 [
b10 k
1=
1(
0C
b10 ?
b10 ]
b10 o
1"
#20
0"
#21
1'
0=
0(
b10 9
b10 J
b10 a
15
bx z
b11 ?
b11 ]
b11 o
1"
#22
0"
#23
b0 !
b0 F
b0 :
b0 I
b0 n
b0 B
b0 G
b0 K
b0 M
b0 O
b0 Q
b0 S
b0 U
b0 W
b0 Y
b0 \
b0 m
b0 A
b0 [
b0 k
b11 z
05
0'
b10 6
b10 N
b10 c
b0 ?
b0 ]
b0 o
1"
#24
b1 z
b1000000 q
b1000000 ~
b10000000 s
b10000000 ""
b10000000 r
b10000000 |
b1 x
b1 }
b0 w
b0 {
b0 !"
b111 u
b111000001 E
b111000001 p
b10000000 >
b10000000 _
b10000000 `
0"
b1110000010000000 #
b1110000010000000 %
b1110000010000000 ^
#25
1C
b1 ?
b1 ]
b1 o
1"
#26
0"
#27
b10 !
b10 F
b10 :
b10 I
b10 n
b10 B
b10 G
b10 K
b10 M
b10 O
b10 Q
b10 S
b10 U
b10 W
b10 Y
b10 \
b10 m
b10 A
b10 [
b10 k
b1000000 &
b1000000 j
b1000000 v
1(
0C
b10 ?
b10 ]
b10 o
1"
#28
0"
#29
1'
0(
17
bx z
b11 ?
b11 ]
b11 o
1"
#30
0"
#31
b1 z
07
0'
b10 8
b10 L
b10 b
b0 ?
b0 ]
b0 o
1"
#32
b0 z
b10000000 q
b10000000 ~
b1000 r
b1000 |
b1000 s
b1000 ""
b0 x
b0 }
b100 w
b100 {
b100 !"
b0 u
b0 >
b0 _
b0 `
b100000 E
b100000 p
0"
b1000000000000 #
b1000000000000 %
b1000000000000 ^
#33
bx !
bx F
bx :
bx I
bx n
bx B
bx G
bx K
bx M
bx O
bx Q
bx S
bx U
bx W
bx Y
bx \
bx m
bx A
bx [
bx k
b1000 &
b1000 j
b1000 v
1C
b1 ?
b1 ]
b1 o
1"
#34
0"
#35
b10 !
b10 F
b10 B
b10 G
b10 K
b10 M
b10 O
b10 Q
b10 S
b10 U
b10 W
b10 Y
b10 \
b10 m
b10 A
b10 [
b10 k
b10000000 &
b10000000 j
b10000000 v
1(
0C
bx D
bx H
bx l
b10 ?
b10 ]
b10 o
1"
#36
0"
#37
bx !
bx F
bx B
bx G
bx K
bx M
bx O
bx Q
bx S
bx U
bx W
bx Y
bx \
bx m
bx A
bx [
bx k
1'
0(
bx 9
bx J
bx a
1/
bx z
b11 ?
b11 ]
b11 o
1"
#38
0"
#39
b10 !
b10 F
b10 B
b10 G
b10 K
b10 M
b10 O
b10 Q
b10 S
b10 U
b10 W
b10 Y
b10 \
b10 m
b10 A
b10 [
b10 k
b0 z
0/
0'
b0 ?
b0 ]
b0 o
1"
#40
0"
